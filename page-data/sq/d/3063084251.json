{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your data</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository for your data </h2>\n\nThis could be a general, non-curated repository such as Figshare or a curated, domain-specific one such Pangaea or Hydroshare. \n\n<h3>Why is this important? </h3>\n\nSharing your data in publically accessible repository enables other (and yourself) researchers to use your original data for reprocublity and replicability studies or extend your findings. \n\n---\n\n<h2> Fill out the needed metadata, including the license </h2>\n\nMost repositories will guide you through the process, including any specific mandatory fields.  \n\nDon't forget to add a license. Here is a quick guide about commonly-used licenses: https://chooser-beta.creativecommons.org \n\n<h3>Why is this important? </h3>\n\nAdding the proper metadata ensures maximum reuse of your data in other studies. \n\nLicenses indicate the terms and conditions under which your data can be used. Make sure that you choose a license appropriate given the funding agency. \n\n---\n\n<h2> Upload the data </h2>\n\nIf you are working with large datasets, make sure that the repository can accommodate them. For instance, Figshare only allows files with a maximum size of 20GB. \n\n---\n\n<h2> Enable citation of the data </h2>\n\nThe citation should include a unique persistent identifier for the data. \n\n<h3>Why is this important? </h3>\n\nCitations help you get recognized for all of your work. Additionaly, it is an integral part of reproducibility since it can give information about the provenance of the data. \n\n---\n\n<h2> Citing  Data in your paper </h2>\n\n- Citation goes in the references section\n- Guidelines on how to cite data are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a Data Resources section, an in-text pointer in the \"Acknowledgements\" section. \n\n---\n\n","fields":{"slug":"/chapter4_01_data"}}},{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your workflow</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository</h2>\n\nIf your workflow is sketched but you are not planning to provide an executable version, the best option is Figshare or Zenodo and treat the sketch as data.\n\nIf you are planning to provide an executable workflow, several options are available:\n1. Provide an electronic Notebook. Make sure to indicate any manual steps in the text narrative of the notebook.\n2. Provide a series of scripts. In this case, make sure you have a \"read me\" file that describes in which order to execute and what are the expected output of each script. \nIn both cases, a sketch of the workflow could still be useful and should be shared in the same repository as the executable workflow. There are several options but a popular one is Github, which allows for many developers to work together and has verion control.\n\n<h3>Why is this important? </h3>\n\nSharing your workflow in publically accessible repository enables other (and yourself) researchers to use your original workflow for reprocublity and replicability studies or apply it to other studies. \n\nVersion control allows to easily track changes in the workflow (made by you or other collaborators), and rolls back to a prior stable version if needed or runs continous integration to ensure that introduced changes are still giving proper results. Many platforms, including GitHub, provide other collaboration tools such as issue tracker and project management tools that you will learn to use in subsequent modules. \n\n---\n\n<h2> Provide enough metadata for reuse, including a licence and your conmputational environment </h2>\n \nTo share your computational environment, you can either list the libraries in a \"read me\" file. \n\n<h3>Why is this important? </h3>\n\nThe license identifies the rules and conditions under which your workflow can be reused by others. Some of the most used licences for open-source project are the Apache 2.0 and MIT licenses. These licenses are permissive, meaning that they have few restrictions to allow others to reuse your work. You can use this website to help you choose a license: https://choosealicense.com.\n\nIf you are using GitHub, use the following to add a license to your repository: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository \n\nIn the case of executable workflows, sharing your computational environment, and in particular the version of the packages, is critical to long-term reproducbility. Five years from now, a particular library could change its default behavior, resulting in differing results.\n\n---\n\n<h2> [Optional] Making your workflow executable</h2>\n\nFor full reproducibility, you may want to consider sharing your workflow in a Docker container or through Binder (e.g., you can use myBinder)\n\n<h3>Why is this important? </h3>\n\nBuilding environment from a list of libraries may become tricky a few years from when the workflow was created. Docker containers make it easier for others to reproduce your work.  \n\n\n---\n\n<h2> Enable citation of the workflow</h2>\n\nThe citation should include a unique persistent identifier for the workflow. If using a sketch publicly available on a general-purpose repository such as Figshare, you will obtain a permanent unique identifier from them.  Most software repositories (including GitHub), which might be more appropriate for executable workflows, do not mint DOIs directly. One option is to link your GitHub repository to Zenodo to obtain a DOI for each version of your workflow upon release. \n\nIn most cases, you will have to provide a citation for your workflow. To do so, you can use CodeMeta (https://codemeta.github.io/) and the Citation File Format (https://citation-file-format.github.io/). In each case, a plain text file (CITATION.cff) is added to your repository. When you link your GitHub repository with Zenodo, the content of the CITATION.cff file is used to generate the citation in combination with the minted DOI from Zenodo. \n\n<h3>Why is this important? </h3>\n\nCitation helps you get credit for all of your research. \n\n---\n\n<h2> Citing the workflow in your paper </h2>\n\nIf using a sketch for your workflow, you can include the figure directly into the manusctipt in the methods section or in supplementary information. \n\nFor executable workflows, you can treat it as software:\n- Citation goes in the references section\n- Guidelines on how to cite software are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a \"Data Resources\" or \"Open Science\" section, an in-text pointer in the \"Acknowledgements\" section. \n\nYou may combine sketch and executable workflows to ensure that your study is reproducible. \n\n---\n\n","fields":{"slug":"/chapter4_03_workflow"}}},{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your software</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository with version control </h2>\n\nThere are several options but a popular one is Github, which allows for many developers to work together and has verion control. \n\n<h3>Why is this important? </h3>\n\nSharing your software in publically accessible repository enables other (and yourself) researchers to use your original software for reprocublity and replicability studies or apply it to other studies. \n\nVersion control allows to easily track changes in the software (made by you or other collaborators), and rolls back to a prior stable version if needed or runs continous integration to ensure that introduced changes are still giving proper results. Many platforms, including GitHub, provide other collaboration tools such as issue tracker and project management tools that you will learn to use in subsequent modules. \n\n---\n\n<h2> Provide enough metadata for reuse, including a licence </h2>\n\n<h3>Why is this important? </h3>\n\nThe license identifies the rules and conditions under which your software can be reused by others.  \n\nSome of the most used licences for open-source project are the Apache 2.0 and MIT licenses. These licenses are permissive, meaning that they have few restrictions to allow others to reuse your work. You can use this website to help you choose a license: https://choosealicense.com.\n\nIf you are using GitHub, use the following to add a license to your repository: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository \n\n---\n\n<h2> Register your code in a community registry </h2>\n\nSome registries are language specific (e.g., PyPi for Python and CRAN for R). Others are cross-language, but may be dedicated to a scientific domain (e.g., Hydroshare, DesignSafe)\n\n<h3>Why is this important? </h3>\n\nThe registry provides more visibility for your work by adding metadata to your package. In some instances, it makes it easier to install your package. \n\n\n---\n\n<h2> Enable citation of the Software </h2>\n\nThe citation should include a unique persistent identifier for the software. Most software repositories (including GitHub) do not mint DOIs directly. One option is to link your GitHub repository to Zenodo to obtain a DOI for each version of your software upon release. \n\nIn most cases, you will have to provide a citation for your software. To do so, you can use CodeMeta (https://codemeta.github.io/) and the Citation File Format (https://citation-file-format.github.io/). In each case, a plain text file (CITATION.cff) is added to your repository. When you link your GitHub repository with Zenodo, the content of the CITATION.cff file is used to generate the citation in combination with the minted DOI from Zenodo. \n\n<h3>Why is this important? </h3>\n\nCitation helps you get credit for all of your research. More cricitally, software citation should always include a version of the software used in the work for reproducibility. \n\n---\n\n<h2> Citing  software in your paper </h2>\n\n- Citation goes in the references section\n- Guidelines on how to cite software are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a \"Data Resources\" or \"Open Science\" section, an in-text pointer in the \"Acknowledgements\" section. \n\n---\n\n","fields":{"slug":"/chapter4_02_software"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 1<br>Git and GitHub</h1></div>\n\n---\n# Git\n\nGit is a distributed version control system that helps developers track and manage changes in their codebase. Here's a breakdown:\n\n* Version Control: Git keeps a history of changes made to files, allowing developers to revert to previous versions, collaborate with others, and handle multiple versions of a project.\n* Distributed System: Unlike centralized version control systems, Git allows every developer to have a full copy of the repository, making it robust and ideal for collaborative work.\n* Key Features:\n  * Branching and merging: Developers can work on separate branches and merge changes seamlessly.\n  * Speed and efficiency: Operations like commits, diffs, and merges are fast.\n  * Offline capability: Most tasks can be done without an internet connection.\n\n\n---\n\n# GitHub\n\nGitHub is a web-based platform built on top of Git, providing additional features for collaboration and project management. It allows developers to host and manage Git repositories in the cloud. \n\n* Integration with CI/CD Tools: Automate testing, building, and deployment pipelines.\n* GitHub Pages: Host static websites directly from a repository.\n* Code Hosting: GitHub stores your code in repositories and makes it accessible to collaborators or the public.\n* Collaboration Tools:\n  * Pull requests: Suggest and review code changes.\n  * Issue tracking: Manage bugs, feature requests, and tasks.\n  * Project boards: Organize and prioritize work visually.\n* Social and Community Features:\n  * Forking: Clone repositories to create your version.\n  * Stars: Bookmark repositories you find useful.\n  * Discussions: Communicate and share knowledge within the community.\n\n[Pythia - What is GitHub?](https://foundations.projectpythia.org/foundations/github/what-is-github.html)      \n\n[Pythia - What is a GitHub Repository?](https://foundations.projectpythia.org/foundations/github/github-repos.html)\n\n---\n\n## Git vs. GitHub\n\n* Git: A tool for version control and code management.\n* GitHub: A platform that uses Git while adding collaboration, hosting, and project management features.\n\nThey are often used together, but GitHub is just one of several services (like GitLab and Bitbucket) that can host Git repositories.\n\n","fields":{"slug":"/chapter5_01_git_and_github"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 2<br>Introduction to GitHub</h1></div>\n\n---\n\n## Github\n\nThis lesson will introduce the functions of GitHub, the de facto standard platform for collaboration and version control used by the open-source coding community.\n\nIn the last exercise, you will configure your GitHub account for secure logins via ssh and/or https.\n\n---\n\n## What is a repository?\n\n<div><h1><img src=\"https://docs.github.com/assets/cb-29762/images/help/repository/repo-create-global-nav-update.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nA repository (repo) is a web-hosted file directory. A repo can be public or private and can have multiple collaborators. Repos are typically used to house coding projects, but they can also be used to store other types of files.\n\n\n\n\n\nSome possible uses:\n\n* Share a scientific workflow\n* Publish a website\n* Collaborate on a coding project\n  * Track changes\n  * Assign tasks\n  * Maintain production and development versions simulateously and merge when appropriate\n\n---\n## Issues and Discussions\n\n### Issues\n\nA GitHub Issue is a note in a repository that describes a bug, suggests a new feature, or offers general feedback. Issues can be submitted by repository owners/collaborators to track tasks or by outside users with questions/suggestions. \n\n#### Writing a good issue\n\nA bug report should consist of a reproducible example. Some repositories include [issue templates](https://github.com/stevemao/github-issue-templates?tab=readme-ov-file), which generally include space for <em>Expected Behavior</em>, <em>Actual Behavior</em>, <em>Steps to Reproduce the Problem</em>, and <em>Specifications (Version, Platform, Subsystem)</em>. Here's an example of a [well written issue](https://github.com/LinkedEarth/Pyleoclim_util/issues/469). Writing issues in this way makes reproducing problems (or misperceptions of problems) straightforward. This allows for smooth communication with the repository maintainers and greatly improves your chances of resolving your problems.\n\n[More on Issues from project Pythia](https://foundations.projectpythia.org/foundations/github/github-issues.html).\n\n### Discussions\n\nGitHub Discussions provide a more open-ended forum for community engagement. A discussion topic is an open space for conversations such as steering project directions, eliciting community feedback, or offering notes on a new release.\n\n[More on Discussions from GitHub](https://resources.github.com/devops/process/planning/discussions/)\n\n---\n## Cloning and Forking\n\nMaking a copy of a public repository can be useful in many circumstances. There are two ways to do this: <em>Clonin</em>g and <em>Forking</em>.\n\n---\n\n### Cloning\n\n<div><h1><img src=\"https://docs.github.com/assets/cb-60499/images/help/repository/https-url-clone-cli.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nCloning a repository creates your own copy, <strong>independent</strong> of the original repo. This method is ideal for creating your own project, using an existing repo as the starting point.\n\n\n\n\n\nA few use cases:\n\n* Reproducing a scientific workflow\n* Using the structure of a repo wherein you will infill the content\n  * A website\n  * A code library (R, Python, etc.)\n\n---\n\n### Forking\n<div><h1><img src=\"https://user-images.githubusercontent.com/17777237/54873012-40fa5b00-4dd6-11e9-98e0-cc436426c720.png\" alt=\"GitHub Logo\" width=15% align=\"left\"/></h1></div>\n\nForking a repo creates a copy that will track the original. This method is primarily used for making changes to the original repo by users without direct access. This is accomplished by a pull request, which is covered in the next module.\n\n[Clong and Forking from project Pythia](https://foundations.projectpythia.org/foundations/github/github-cloning-forking.html)\n\n---\n\n## Setting up a GitHub account\n\n<div><h1><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/github_signup.png?raw=true\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nSigning up for a new GitHub account is simple and free. After signing up you can create a new repository and try some of the features outlined in this lesson.\n\nThe linked tutorial will guide you through some of the more advanced components of a GitHub account.\n\n[Account setup tutorial from Project Pythia](https://foundations.projectpythia.org/foundations/github/github-setup-advanced.html)\n\n\n","fields":{"slug":"/chapter5_02_intro_github"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 3<br>Intermediate GitHub</h1></div>\n\n---\n\nNow that you set up your GitHub account, it is time to start collaborating.\n\nLearn about branches, pull requests, and version control systems.\n\n---\n\n## Pull Request\n\nAfter you have forked a repo, you are free to fix bugs or add features. After improving the code you can offer your fork as an improved version back to the orginal repo owners. This offer is called a pull request.\n\n[Pull Requests from project Pythia](https://foundations.projectpythia.org/foundations/github/github-pull-request.html)\n---\n\n## Make your repository citable\n\nZenodo is most known for data archival. When depositing data with Zenodo, a digital object identifier (DOI) is issued. Creating a persistent reference to the data exactly as they exist at the time of upload and offering an object for citation in scientific publications. Zendo also offers this service for GitHub repositories.\n\n* Open the Zenodo [link](https://zenodo.org/login) and login <strong>with GitHub</strong>. You will need to <em>Authorize Zenodo</em> to access GitHub.\n\n<div><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/zenodo_login.png?raw=true\" alt=\"GitHub Logo\" width=25% align=\"left\"/></div>\n\n* Navigate to Zenodo's [page](https://zenodo.org/account/settings/github/) for managing GitHub and enable archival on the repository.\n\n<div><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/zendo_github_page.png?raw=true\" alt=\"GitHub Logo\" width=25% align=\"left\"/></div>\n\n[GitHub tutorial for linking to Zenodo](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)\n\n---\n\n## Navigate to the login page for Zenodo\n\n[Git Branches](https://foundations.projectpythia.org/foundations/github/git-branches.html)\n\n[Creating a Pull Request](https://foundations.projectpythia.org/foundations/github/github-pull-request.html)\n\n[Version Control with Git](https://foundations.projectpythia.org/foundations/github/basic-git.html)\n","fields":{"slug":"/chapter5_03_intermediate_github"}}}]}}}