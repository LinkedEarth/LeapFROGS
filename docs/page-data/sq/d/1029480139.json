{"data":{"site":{"siteMetadata":{"testTemplate":"from wasabi import msg\nfrom black import format_str, FileMode\n\nfile_mode = FileMode()\n\ndef blacken(code):\n    try:\n        return format_str(code, mode=file_mode)\n    except:\n        return code\n\n__msg__ = msg\n__solution__ = blacken(\"\"\"${solution}\"\"\")\n\n${solution}\n\n${test}\n\ntry:\n    test()\nexcept AssertionError as e:\n    __msg__.fail(e)","juniper":{"repo":"LinkedEarth/LeapFROGS","branch":"main","kernelType":"python3","lang":"python","debug":false}}},"allCode":{"edges":[{"node":{"name":"exc_01_02","code":"temperature = _____________\n"}},{"node":{"name":"exc_01_01","code":"_______________\n"}},{"node":{"name":"exc_01_03","code":"area = ____________\n"}},{"node":{"name":"exc_01_04","code":"_____________\n_____________\n"}},{"node":{"name":"exc_01_09","code":"____________"}},{"node":{"name":"exc_01_06","code":"minerals = __________"}},{"node":{"name":"exc_01_08","code":"l1 = ['Geomorphology','Paleoceanography','Tectonics']\nl2 = [\"Data Science\",\"AI\",\"Python\",\"R\",\"Timeseries\"]\n\nl = ___________\n"}},{"node":{"name":"exc_01_05","code":"text = 'The law of superposition, a major principle of stratigraphy, states that within a sequence of layers of sedimentary rock, the oldest layer is at the base and that the layers are progressively younger with ascending order in the sequence.'[-----]\n\nword = ___________"}},{"node":{"name":"exc_01_10","code":"field = 'Geoscience'\n\nif field == 'Geoscience':\n    print('This person is a geoscientist')\nelse:\n    print('This person is not a geoscientist')"}},{"node":{"name":"exc_01_07","code":"things = ['Pluto', 'Water', 6 , 3.14, 'California', True]\n\nitem = ___________"}},{"node":{"name":"exc_01_12","code":"x = _______\n\nwhile ________:\n    x=-_______"}},{"node":{"name":"exc_01_11","code":"field = {'Paul': 'Mathematics',\n         'Marie': 'Physics',\n         'Marc':'Hydrology',\n         'Julia':'Geosciences'}\n\nif field[_______]=='Geosciences':\n    ans = 'Geoscientist'\n__________'Physics':\n    ans = 'Physicist'\n_______:\n    ________ = 'Neither'\n"}},{"node":{"name":"exc_01_13","code":"mylist = _________\n\nnbr_str=________\n\nfor item in ________:\n    ____________\n    "}},{"node":{"name":"exc_01_14","code":"_____ caesar_cypher(_____,_______):\n    ans = \"\"\n    # iterate over the given text\n    _______ i in range(len(message)):\n        ch = message[i]\n        # check if space is there then simply add space\n        _____ ch==\" \":\n            ans+=\" \"\n        # check if a character is uppercase then encrypt it accordingly \n        ______ (ch.isupper()):\n            ans+= chr((ord(ch) + shift-65) % 26 + 65)\n        # check if a character is lowercase then encrypt it accordingly\n        _______:\n            ans+= chr((ord(ch) + shift-97) % 26 + 97)\n    \n    _________\n\n\ntext = [\"I love geoscience\", \"Geology ROCKS\"]\nans = []\n\nfor item in text:\n    ans.append(caesar_cypher(item))\n    "}},{"node":{"name":"exc_01_15","code":"_____________:\n    def ______________:\n        ___________________\n        ___________________\n        ___________________\n        ___________________\n\n    def find_min_time(________):\n        return ____________\n    \n\nts = ________________\nmin_time = _______________\n\n    "}},{"node":{"name":"solution_01_02","code":"temperature = 25*9/5+32\n"}},{"node":{"name":"solution_01_03","code":"area = 3.14159*5**2\n"}},{"node":{"name":"solution_01_01","code":"print(\"I love doing geoscience research with Python\")\n"}},{"node":{"name":"solution_01_05","code":"text = 'The law of superposition, a major principle of stratigraphy, states that within a sequence of layers of sedimentary rock, the oldest layer is at the base and that the layers are progressively younger with ascending order in the sequence.'\n\nword = text[11:24]"}},{"node":{"name":"solution_01_07","code":"things = ['Pluto', 'Water', 6 , 3.14, 'California', True]\n\nitem = things[4]"}},{"node":{"name":"solution_01_04","code":"temperature = 25\nunits = 'degC'\n"}},{"node":{"name":"solution_01_06","code":"minerals = ['Talc','Gypsum','Calcite','Fluorite','Apatite','Feldpsar','Quartz','Topaz','Corundum','Diamond']"}},{"node":{"name":"solution_01_09","code":"my_proxy= {\"proxyArchive\": \"Marine Sediment\",\n  \"variable\": \"Mg/Ca\",\n  \"values\": [2.5,3.6,2.3,4.5],\n  \"unit\": \"mmol/mol\"}\n\ntype(my_proxy['values'])"}},{"node":{"name":"solution_01_11","code":"field = {'Paul': 'Mathematics',\n         'Marie': 'Physics',\n         'Marc':'Hydrology',\n         'Julia':'Geosciences'}\n\nif field['Paul']=='Geosciences':\n    ans = 'Geoscientist'\nelif field['Paul'] == 'Physics':\n    ans = 'Physicist'\nelse:\n    ans = 'Neither'\n"}},{"node":{"name":"solution_01_10","code":"field = 'Geoscience'\n\nif field == 'Geoscience':\n    print('This person is a geoscientist')\nelse:\n    print('This person is not a geoscientist')"}},{"node":{"name":"solution_01_12","code":"x = 100\n\nwhile x>10:\n    x=x/2\n"}},{"node":{"name":"solution_01_13","code":"mylist = [\"Marine Sediment\", \"Coral\", \"Ice\", \"Wood\"]\n\nnbr_str=[]\n\nfor item in mylist:\n    nbr_str.append(len(item))\n    "}},{"node":{"name":"solution_01_14","code":"def caesar_cypher(message,shift=5):\n    ans = \"\"\n    # iterate over the given text\n    for i in range(len(message)):\n        ch = message[i]\n        # check if space is there then simply add space\n        if ch==\" \":\n            ans+=\" \"\n        # check if a character is uppercase then encrypt it accordingly \n        elif (ch.isupper()):\n            ans+= chr((ord(ch) + shift-65) % 26 + 65)\n        # check if a character is lowercase then encrypt it accordingly\n        else:\n            ans+= chr((ord(ch) + shift-97) % 26 + 97)\n    \n    return ans\n\n\ntext = [\"I love geoscience\", \"Geology ROCKS\"]\nans = []\n\nfor item in text:\n    ans.append(caesar_cypher(item))"}},{"node":{"name":"solution_01_15","code":"class TimeSeries:\n    def __init__(self, time, values, time_unit, values_unit):\n        self.time = time\n        self.values = values\n        self.time_unit = time_unit\n        self.values_unit = values_unit\n\n    def find_min_time(self):\n        return min(self.time)\n    \n\nts = TimeSeries(time  = [1981,1982,1990,2005], values = [50,78,90,45], time_unit = 'Years', values_unit='Number of floods')\nmin_time = ts.find_min_time()\n"}},{"node":{"name":"test_01_02","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert temperature == 77, \"temperature is incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"test_01_03","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert area == 3.14159*5**2, \"Area is incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"test_01_04","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert temperature == 25, \"Temperature is incorrect\"\n    assert units == 'DegC', \"Units is incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"test_01_05","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert word == 'superposition', \"Slice indices are incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"test_01_06","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert minerals == ['Talc','Gypsum','Calcite','Fluorite','Apatite','Feldpsar','Quartz','Topaz','Corundum','Diamond'], \"List is incorrect. Make sure it is ordered properly!\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"test_01_08","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n\n    ans = ['Geomorphology','Paleoceanography','Tectonics', \"Data Science\",\"AI\",\"R\",\"Timeseries\"]\n   \n    assert l == ans, \"Remember that Python uses zero-index!\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"test_01_09","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n\n    __msg__.good(\"it's a list!\")\n"}},{"node":{"name":"test_01_07","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert item == 'California', \"Remember that Python uses zero-index!\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"test_01_11","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n\n    assert ans == 'Neither', \"Wrong answer!\"\n\n    __msg__.good(\"Good job!\")\n"}},{"node":{"name":"test_01_12","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n\n    assert x == 6.25, \"Wrong answer!\"\n\n    __msg__.good(\"Good job!\")\n"}},{"node":{"name":"solution_01_08","code":"l1 = ['Geomorphology','Paleoceanography','Tectonics']\nl2 = [\"Data Science\",\"AI\",\"Python\",\"R\",\"Timeseries\"]\n\nl =l1+l2\n\nl.pop(5)"}},{"node":{"name":"test_01_15","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n\n    assert ts.time == [1981,1982,1990,2005], \"Wrong time vector!\"\n    assert ts.values == [50,78,90,45], \"Wrong values vector!\"\n    assert ts.time_unit == 'Years', 'Wrong time units!'\n    assert ts.values_unit = 'Number of floods', 'Wrong units for the values vector!'\n    assert min_time == 1981, \"Wrong minimum value!\"\n\n    __msg__.good(\"Good job!\")\n"}},{"node":{"name":"test_01_13","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n\n    assert nbr_str == [15, 5, 3, 4], \"Wrong answer!\"\n\n    __msg__.good(\"Good job!\")\n"}},{"node":{"name":"test_01_14","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n\n    assert ans == ['N qtaj ljtxhnjshj', 'Ljtqtld WTHPX'], \"Wrong answer!\"\n\n    __msg__.good(\"Good job!\")\n"}}]}}}