{"data":{"allMarkdownRemark":{"edges":[{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your data</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository for your data </h2>\n\nThis could be a general, non-curated repository such as Figshare or a curated, domain-specific one such Pangaea or Hydroshare. \n\n<h3>Why is this important? </h3>\n\nSharing your data in publically accessible repository enables other (and yourself) researchers to use your original data for reprocublity and replicability studies or extend your findings. \n\n---\n\n<h2> Fill out the needed metadata, including the license </h2>\n\nMost repositories will guide you through the process, including any specific mandatory fields.  \n\nDon't forget to add a license. Here is a quick guide about commonly-used licenses: https://chooser-beta.creativecommons.org \n\n<h3>Why is this important? </h3>\n\nAdding the proper metadata ensures maximum reuse of your data in other studies. \n\nLicenses indicate the terms and conditions under which your data can be used. Make sure that you choose a license appropriate given the funding agency. \n\n---\n\n<h2> Upload the data </h2>\n\nIf you are working with large datasets, make sure that the repository can accommodate them. For instance, Figshare only allows files with a maximum size of 20GB. \n\n---\n\n<h2> Enable citation of the data </h2>\n\nThe citation should include a unique persistent identifier for the data. \n\n<h3>Why is this important? </h3>\n\nCitations help you get recognized for all of your work. Additionaly, it is an integral part of reproducibility since it can give information about the provenance of the data. \n\n---\n\n<h2> Citing  Data in your paper </h2>\n\n- Citation goes in the references section\n- Guidelines on how to cite data are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a Data Resources section, an in-text pointer in the \"Acknowledgements\" section. \n\n---\n\n","fields":{"slug":"/chapter4_01_data"}}},{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your software</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository with version control </h2>\n\nThere are several options but a popular one is Github, which allows for many developers to work together and has verion control. \n\n<h3>Why is this important? </h3>\n\nSharing your software in publically accessible repository enables other (and yourself) researchers to use your original software for reprocublity and replicability studies or apply it to other studies. \n\nVersion control allows to easily track changes in the software (made by you or other collaborators), and rolls back to a prior stable version if needed or runs continous integration to ensure that introduced changes are still giving proper results. Many platforms, including GitHub, provide other collaboration tools such as issue tracker and project management tools that you will learn to use in subsequent modules. \n\n---\n\n<h2> Provide enough metadata for reuse, including a licence </h2>\n\n<h3>Why is this important? </h3>\n\nThe license identifies the rules and conditions under which your software can be reused by others.  \n\nSome of the most used licences for open-source project are the Apache 2.0 and MIT licenses. These licenses are permissive, meaning that they have few restrictions to allow others to reuse your work. You can use this website to help you choose a license: https://choosealicense.com.\n\nIf you are using GitHub, use the following to add a license to your repository: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository \n\n---\n\n<h2> Register your code in a community registry </h2>\n\nSome registries are language specific (e.g., PyPi for Python and CRAN for R). Others are cross-language, but may be dedicated to a scientific domain (e.g., Hydroshare, DesignSafe)\n\n<h3>Why is this important? </h3>\n\nThe registry provides more visibility for your work by adding metadata to your package. In some instances, it makes it easier to install your package. \n\n\n---\n\n<h2> Enable citation of the Software </h2>\n\nThe citation should include a unique persistent identifier for the software. Most software repositories (including GitHub) do not mint DOIs directly. One option is to link your GitHub repository to Zenodo to obtain a DOI for each version of your software upon release. \n\nIn most cases, you will have to provide a citation for your software. To do so, you can use CodeMeta (https://codemeta.github.io/) and the Citation File Format (https://citation-file-format.github.io/). In each case, a plain text file (CITATION.cff) is added to your repository. When you link your GitHub repository with Zenodo, the content of the CITATION.cff file is used to generate the citation in combination with the minted DOI from Zenodo. \n\n<h3>Why is this important? </h3>\n\nCitation helps you get credit for all of your research. More cricitally, software citation should always include a version of the software used in the work for reproducibility. \n\n---\n\n<h2> Citing  software in your paper </h2>\n\n- Citation goes in the references section\n- Guidelines on how to cite software are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a \"Data Resources\" or \"Open Science\" section, an in-text pointer in the \"Acknowledgements\" section. \n\n---\n\n","fields":{"slug":"/chapter4_02_software"}}},{"node":{"rawMarkdownBody":"\n<div><h1>Author Checklist:<br>Publishing your workflow</h1></div>\n\n---\n\n<h2> Identify a publicly accessible repository</h2>\n\nIf your workflow is sketched but you are not planning to provide an executable version, the best option is Figshare or Zenodo and treat the sketch as data.\n\nIf you are planning to provide an executable workflow, several options are available:\n1. Provide an electronic Notebook. Make sure to indicate any manual steps in the text narrative of the notebook.\n2. Provide a series of scripts. In this case, make sure you have a \"read me\" file that describes in which order to execute and what are the expected output of each script. \nIn both cases, a sketch of the workflow could still be useful and should be shared in the same repository as the executable workflow. There are several options but a popular one is Github, which allows for many developers to work together and has verion control.\n\n<h3>Why is this important? </h3>\n\nSharing your workflow in publically accessible repository enables other (and yourself) researchers to use your original workflow for reprocublity and replicability studies or apply it to other studies. \n\nVersion control allows to easily track changes in the workflow (made by you or other collaborators), and rolls back to a prior stable version if needed or runs continous integration to ensure that introduced changes are still giving proper results. Many platforms, including GitHub, provide other collaboration tools such as issue tracker and project management tools that you will learn to use in subsequent modules. \n\n---\n\n<h2> Provide enough metadata for reuse, including a licence and your conmputational environment </h2>\n \nTo share your computational environment, you can either list the libraries in a \"read me\" file. \n\n<h3>Why is this important? </h3>\n\nThe license identifies the rules and conditions under which your workflow can be reused by others. Some of the most used licences for open-source project are the Apache 2.0 and MIT licenses. These licenses are permissive, meaning that they have few restrictions to allow others to reuse your work. You can use this website to help you choose a license: https://choosealicense.com.\n\nIf you are using GitHub, use the following to add a license to your repository: https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-license-to-a-repository \n\nIn the case of executable workflows, sharing your computational environment, and in particular the version of the packages, is critical to long-term reproducbility. Five years from now, a particular library could change its default behavior, resulting in differing results.\n\n---\n\n<h2> [Optional] Making your workflow executable</h2>\n\nFor full reproducibility, you may want to consider sharing your workflow in a Docker container or through Binder (e.g., you can use myBinder)\n\n<h3>Why is this important? </h3>\n\nBuilding environment from a list of libraries may become tricky a few years from when the workflow was created. Docker containers make it easier for others to reproduce your work.  \n\n\n---\n\n<h2> Enable citation of the workflow</h2>\n\nThe citation should include a unique persistent identifier for the workflow. If using a sketch publicly available on a general-purpose repository such as Figshare, you will obtain a permanent unique identifier from them.  Most software repositories (including GitHub), which might be more appropriate for executable workflows, do not mint DOIs directly. One option is to link your GitHub repository to Zenodo to obtain a DOI for each version of your workflow upon release. \n\nIn most cases, you will have to provide a citation for your workflow. To do so, you can use CodeMeta (https://codemeta.github.io/) and the Citation File Format (https://citation-file-format.github.io/). In each case, a plain text file (CITATION.cff) is added to your repository. When you link your GitHub repository with Zenodo, the content of the CITATION.cff file is used to generate the citation in combination with the minted DOI from Zenodo. \n\n<h3>Why is this important? </h3>\n\nCitation helps you get credit for all of your research. \n\n---\n\n<h2> Citing the workflow in your paper </h2>\n\nIf using a sketch for your workflow, you can include the figure directly into the manusctipt in the methods section or in supplementary information. \n\nFor executable workflows, you can treat it as software:\n- Citation goes in the references section\n- Guidelines on how to cite software are often set by the journal but includes an in-text pointer as you would cite any other paper (recommended), an in-text pointer in a \"Data Resources\" or \"Open Science\" section, an in-text pointer in the \"Acknowledgements\" section. \n\nYou may combine sketch and executable workflows to ensure that your study is reproducible. \n\n---\n\n","fields":{"slug":"/chapter4_03_workflow"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 2<br>Introduction to GitHub</h1></div>\n\n---\n\n## Github\n\nThis lesson will introduce the functions of GitHub, the de facto standard platform for collaboration and version control used by the open-source coding community.\n\nFirst, let's create an account.\n\n---\n\n## Setting up a GitHub account\n\n<div><h1><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/github_signup.png?raw=true\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nSigning up for a new GitHub account is simple and free. After signing up you can create a new repository and try some of the features outlined in this lesson.\n\nThe linked tutorial will guide you through some of the more advanced components of a GitHub account.\n\n[Account setup tutorial from Project Pythia](https://foundations.projectpythia.org/foundations/github/github-setup-advanced.html)\n\n\n---\n\n## What is a repository?\n\n<div><h1><img src=\"https://docs.github.com/assets/cb-29762/images/help/repository/repo-create-global-nav-update.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nA repository (repo) is a web-hosted file directory. A repo can be public or private and can have multiple collaborators. Repos are typically used to house coding projects, but they can also be used to store other types of files.\n\nSome possible uses:\n\n* Share a scientific workflow\n* Publish a website\n* Collaborate on a coding project\n  * Track changes\n  * Assign tasks\n  * Maintain production and development versions simulateously and merge when appropriate\n\nAdditional resources: [Pythia - What is a GitHub Repository?](https://foundations.projectpythia.org/foundations/github/github-repos.html)\n\n---\n## Issues and Discussions\n\n### Issues\n\nA GitHub Issue is a note in a repository that describes a bug, suggests a new feature, or offers general feedback. Issues can be submitted by repository owners/collaborators to track tasks or by outside users with questions/suggestions.\n\n**Creating an Issue**\n\n1. Go to the Issues tab.\n2. Click New Issue.\n3. Fill in:\n  * Title: Short description of the task.\n  * Body: Detailed description, including context or instructions.\n  * Labels: Use labels like \"bug,\" \"enhancement,\" \"help wanted.\"\n  * Assignees: Assign team members responsible for the issue. You can also assign yourself!\n4. Click Submit New Issue.\n\n---\n\n### Writing a good issue\n\nA bug report should consist of a reproducible example. Some repositories include [issue templates](https://github.com/stevemao/github-issue-templates?tab=readme-ov-file), which generally include space for <em>Expected Behavior</em>, <em>Actual Behavior</em>, <em>Steps to Reproduce the Problem</em>, and <em>Specifications (Version, Platform, Subsystem)</em>. Here's an example of a [well written issue](https://github.com/LinkedEarth/Pyleoclim_util/issues/469). Writing issues in this way makes reproducing problems (or misperceptions of problems) straightforward. This allows for smooth communication with the repository maintainers and greatly improves your chances of resolving your problems.\n\n[More on Issues from project Pythia](https://foundations.projectpythia.org/foundations/github/github-issues.html).\n\n---\n\n### Using Labels for Organizations\n\nLabels help categorize tasks. Common examples:\n\n* Bug: For errors or problems.\n* Enhancement: For new features or improvements.\n* Documentation: For writing or updating guides.\n* High Priority: For urgent tasks.\n\n#### How to Add Labels\n\n1. Go to the Issues or Pull Requests tab.\n2. Click an issue or pull request.\n3. In the right sidebar, click Labels and select or create a label.\n\n---\n\n## Discussions\n\nGitHub Discussions provide a more open-ended forum for community engagement. A discussion topic is an open space for conversations such as steering project directions, eliciting community feedback, or offering notes on a new release.\n\n[More on Discussions from GitHub](https://resources.github.com/devops/process/planning/discussions/)\n\n---\n## Cloning and Forking\n\nMaking a copy of a public repository can be useful in many circumstances. There are two ways to do this: <em>Clonin</em>g and <em>Forking</em>.\n\n---\n\n### Cloning\n\n<div><h1><img src=\"https://docs.github.com/assets/cb-60499/images/help/repository/https-url-clone-cli.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/></h1></div>\n\nCloning a repository creates your own copy, <strong>independent</strong> of the original repo. This method is ideal for creating your own project, using an existing repo as the starting point.\n\n\nA few use cases:\n\n* Reproducing a scientific workflow\n* Using the structure of a repo wherein you will infill the content\n  * A website\n  * A code library (R, Python, etc.)\n\n---\n\n### Forking\n<div><h1><img src=\"https://user-images.githubusercontent.com/17777237/54873012-40fa5b00-4dd6-11e9-98e0-cc436426c720.png\" alt=\"GitHub Logo\" width=15% align=\"left\"/></h1></div>\n\nForking a repo creates a copy that will track the original. This method is primarily used for making changes to the original repo by users without direct access. This is accomplished by a pull request, which is covered in the next module.\n\n[Clong and Forking from project Pythia](https://foundations.projectpythia.org/foundations/github/github-cloning-forking.html)\n","fields":{"slug":"/chapter5_02_intro_github"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 3<br>Intermediate GitHub</h1></div>\n\n---\n\nNow that you set up your GitHub account, it is time to start collaborating.\n\nLearn about branches, pull requests, and version control systems.\n\n---\n\n## Version control and GitHub releases - an Overview\n\nBefore we delve into the specifics of how version tracking is implemented on the GitHub platform, let's first talk about why we need version control. Version control is essential for scientists because it keeps a detailed history of changes made to files, enabling researchers to track their progress, collaborate effectively, and ensure the reproducibility of their work. It allows multiple people to work on the same project without overwriting each other’s contributions and provides the ability to revert to earlier versions if mistakes occur. By organizing and preserving every step of the research process, version control ensures transparency and prevents the loss of critical data or code.\n\nOnce in a while, one might want to capture a snapshot of the project. These snapshots are called **releases**. For instance, a release could correspond to the publication of a manuscript. This is actually how you should think about a release: a published paper with version control as the editing process leading up to it. \n\n**Why Should Scientists Care?**\n\n1. Transparency: Share your data, code, and analyses openly.\n2. Collaboration: Allow others to build on your work.\n3. Reproducibility: Ensure your results can be replicated.\n4. Organization: Always have access to past versions.\n\n---\n\n## Version Control in GitHub\n\nVersion control helps track changes to your files over time. It ensures you can:\n\n* Keep a record of every change (what, when, and why it was made).\n* Work collaboratively without overwriting others’ work, using `branches` and by creating `pull requests`.\n* Revert to earlier versions if something goes wrong.\n* Think of it as the “track changes” feature in Word, but for any type of file.\n\n**How does GitHub help with version control?**\n\nGitHub provides a centralized platform to:\n\n* Store your project (called a repository).\n* Track every version and change you make (called `commits`).\n* Share your project with collaborators or the public.\n\nTo learn more about version control and different implementations, read [this article](https://github.com/resources/articles/software-development/what-is-version-control).\n\nA detailed description of version control with git (and how it relates to GitHub) can be found [on the Project Pythia's website](https://foundations.projectpythia.org/foundations/github/basic-git.html).\n\n---\n\n### Tips for Scientists Using Version Control\n\n* Always write clear commit messages to explain changes.\n* Use branches for new experiments or major changes.\n* Regularly commit your work to keep track of progress.\n\n---\n\n## What are GitHub releases?\n\nA release is like taking a “snapshot” of your project at a specific point in time.\n* It’s a way to package and share finalized work (e.g., datasets, analyses, or software).\n* You can attach files (like datasets or PDFs) to the release.\n* Releases are versioned (e.g., v1.0, v1.1, v2.0) so others know which is the latest or most stable version.\n\nIt is useful to decide on (1) when to release a new version, and (2) the numbering of the version. Most often, you will see two conventions:\n* x.y.z where x consists of a major release which may result in code breakage as the way the program is called (referred to as an API or application programming interface) is changed (e.g., replacing the name of a parameter); y consists of additional capabilities, and z is used to indicate bug fixes.\n* mm.yyyy which relates to the month and year the software is published. \nIn both of these cases, it is useful to link the GitHub releases to Zenodo releases \n\n---\n\n### Creating a new release on GitHub\n\n1. Navigate to your GitHub repository.\n2. Click Releases > Draft a new release.\n3. Fill out the form:\n    * Tag version: Use semantic versioning as described in the previous slide.\n    * Release title: Provide a descriptive name (e.g., \"Initial Dataset Release\").\n    * Click on `Generate Release Notes` so GitHub automatically populate the description with a history of the versions. \n    * Description: List key changes or features (e.g., \"Includes raw data and analysis scripts for the 2023 project\").\n    * Attach relevant files (e.g., datasets, README.pdf). \n4. Click Publish Release.\n\n---\n\n## Branches\n\nBranches in version control are like parallel workspaces within a project. They allow you to make changes or try out new ideas without affecting the main project (usually called the main or master branch). Each branch starts as a copy of the main project but can be edited independently.\n\n**How to Use Branches**\n1. Experimentation: Use branches to test new methods, analyze datasets, or add features without impacting the stable version of your work.\n2. Collaboration: Team members can work on their own branches, making it easy to merge their contributions later.\n3. Bug Fixes or Updates: Fix an issue or add a new feature in a branch while keeping the main project stable.\nWhen your changes are ready, you can merge the branch back into the main project, ensuring all updates are integrated without disrupting others’ work. Branches help organize work and make collaboration seamless in scientific projects.\n\nAn introduction on how git branches can be found on the [Project Pythia's website](https://foundations.projectpythia.org/foundations/github/git-branches.html). The following slide demonstrates how to use branches on the GitHub platform\n\n---\n\n### Creating a Branch on GitHub\n\n<div><img src=\"https://github.com/LinkedEarth/LeapFROGS/blob/main/static/module5/branches.png?raw=true\" alt=\"GitHub branches\" width=25% align=\"left\"/></div>\n\n1. Go to Your Repository\n    * Log in to GitHub and navigate to the repository where you want to create a branch.\n2. Locate the Branch Dropdown\n    * At the top-left of the repository page, you’ll see a dropdown menu with the name of the current branch (e.g., `main` or `master`).\n3. Create a New Branch\n    * Click the dropdown.\n    * In the search bar at the top of the dropdown, type a name for your new branch (e.g., `experiment-1` or `bug-fix`).\n    * Select Create branch: [branch name] from the dropdown.\n4. Switch to the New Branch\n    * Once created, GitHub will automatically switch to your new branch.\n    * You can confirm this by checking the branch name at the top-left of the repository page.\n\n**Pro Tips:** Use clear and descriptive names for branches (e.g., `data-cleaning`, `add-new-figure`, `update-analysis) and regularly merge changes from the main branch into your branch to keep it up to date.\n\n---\n\n### Using the New Branch\nAny changes you make will now be saved to this branch, keeping the main branch unchanged.\n\nYou can edit files directly on GitHub or upload new ones to this branch.\n\n---\n\n## Pull Request\n\nAfter you have forked a repo or created a new branch into your own repository, you are free to fix bugs or add features. After improving the code you can offer your fork as an improved version back to the orginal repo owners (or `main`/`master` branch). This offer is called a `pull request`.\n\n[Pull Requests from project Pythia](https://foundations.projectpythia.org/foundations/github/github-pull-request.html)\n\n**Merging Back to the Main Branch**\n1. When your work is complete, go to the `Pull Requests tab` at the top of the repository.\n2. Click `New Pull Request` and select your new branch as the source and `main` as the target.\n3. Review the changes and click `Merge` to integrate your branch into the main project.\n\nA step-by-step tutorial is given in the [GitHub documentation](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/incorporating-changes-from-a-pull-request/merging-a-pull-request). \n\n---\n\n## Make your repository citable\n\nZenodo is most known for data archival. When depositing data with Zenodo, a digital object identifier (DOI) is issued. Creating a persistent reference to the data exactly as they exist at the time of upload and offering an object for citation in scientific publications. Zendo also offers this service for GitHub repositories.\n\n* Open the Zenodo [link](https://zenodo.org/login) and login <strong>with GitHub</strong>. You will need to <em>Authorize Zenodo</em> to access GitHub.\n\n<div><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/zenodo_login.png?raw=true\" alt=\"Zenodo Login\" width=25% align=\"left\"/></div>\n\n\n\n* Navigate to Zenodo's [page](https://zenodo.org/account/settings/github/) for managing GitHub and enable archival on the repository.\n\n<div><img src=\"https://github.com/LinkedEarth/RLeapFROGS/blob/main/static/module5/zendo_github_page.png?raw=true\" alt=\"Zenodo GitHub\" width=25% align=\"left\"/></div>\n\n\n\n\n[GitHub tutorial for linking to Zenodo](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content)\n\n---","fields":{"slug":"/chapter5_03_intermediate_github"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 4<br>GitHub for Project Management</h1></div>\n\n---\n\nGitHub provides robust project management tools to help organize, track, and complete tasks in your projects. Here’s how to use features like Projects, Milestones, and Issues to streamline your workflow.\n\n---\n\n## Using GitHub Projects\n\nProjects act as [Kanban boards](https://en.wikipedia.org/wiki/Kanban_board) where you can organize tasks into customizable columns (e.g., \"To Do,\" \"In Progress,\" \"Done\").\n\nYou can see an example of a Project board for the Pyleoclim software [here](https://github.com/orgs/LinkedEarth/projects/7/views/1). The following slides give an overview on how to use GitHub projects for your project management. A more complete guide is available [here](https://docs.github.com/en/issues/planning-and-tracking-with-projects).\n\n---\n\n## Why Use GitHub for Project Management?\n\n* Centralizes tasks and project details in one place.\n* Encourages collaboration with team members.\n* Tracks progress and maintains transparency.\n* Integrates seamlessly with version control and repositories.\n\n---\n\n### How to Create a GitHub Project\n\n1. Navigate to your repository.\n2. Click the Projects tab.\n3. Click New Project and choose either Table or Board (Kanban-style).\n4. Name your project and add a description (optional).\n5. Add columns:\n    * Common column titles: \"To Do,\" \"In Progress,\" \"Completed.\" Although not completely necessary, the completed column allows you to keep track of all the issues you have worked on in your project. When you are about to create a release, it is always a good feeling to see how much you have actually accomplished. \n6. Add tasks:\n    * Click + Add a card in a column.\n    * Link it to an Issue or create a standalone card.\n\n---\n\n### Using Projects\n\n* Move cards between columns as tasks progress.\n* Add labels or assignees to tasks for clarity.\n* Track progress with built-in insights and views. \n\n---\n\n## Tracking Progress with Milestones\n\n[Milestones](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones) in GitHub are a way to group related tasks (issues and pull requests) under a single goal or deadline. They help track progress toward completing a larger project, such as finishing a research paper, finalizing a dataset, or releasing software. Each milestone includes a title, description, and optional due date, and displays the percentage of tasks completed, making it easy to monitor progress and stay organized.\n\n---\n\n### How to create a Milestone\n\n1. Go to the Issues tab in your repository.\n2. Click Milestones > New Milestone.\n3. Fill in:\n    * Title: e.g., \"Submit Paper Draft\"\n    * Description: Outline the goal.\n    * Due Date: Optional, but helps with deadlines. Due dates are also \n4. Click Create Milestone.\n\n---\n\n### Assign issues to Milestones\n\n1. Open an issue.\n2. In the right-hand sidebar, select the Milestone dropdown.\n3. Choose a milestone to link the issue. Check our [intro to GitHub](https://linked.earth/LeapFROGS/module5) slides on how to create and write a good issue. \n\n---\n\n## Combining Issues, Milestones, and Projects\n\n* Assign issues to milestones for tracking progress toward a larger goal.\n* Add issues to your project board for task management.\n* Use filters in the Issues tab to see:\n* Tasks related to a specific milestone.\n* Tasks assigned to a specific user or label.\n\n---\n\n## Monitoring Progress\n\n* View milestone progress on the Milestones page (e.g., percentage of issues completed).\n* Use GitHub Insights (in repository settings) to see contributor activity and progress.\n* Regularly update your Project Board to reflect task statuses.\n\n---\n\n## Collaborating with teams\n\n* Use the Assignees field in issues or pull requests to assign tasks to team members.\n* Use the Comments section to discuss tasks and share updates.\n* Mention team members with @username to notify them.\n\n---","fields":{"slug":"/chapter5_04_projectmanagement"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 5<br>Advanced GitHub</h1></div>\n\n---\n\n## Getting started with GitHub Actions\n\n[GitHub Actions](https://github.com/features/actions) is a powerful feature that allows you to automate tasks directly within your GitHub repository. You can use it to automate testing, deployment, or other workflows triggered by events like a code push or a pull request.\n\n---\n\n### What is GitHub Actions?\n\nGitHub Actions allows you to create workflows that automate tasks for your repository. These workflows are written in YAML files and are triggered by specific events (e.g., code commits, issue creation).\n\n---\n\n### Common Use Cases\n\n* ***Continuous Integration (CI)***: Automatically test your code when changes are made. This is particularly useful if you are developing software packages. \n* ***Continuous Deployment (CD)***: Deploy your app or website when updates are pushed. This is useful to automate the creation of Docker containers. \n* ***Automated Workflows***: Tasks like code formatting, notifications, or data processing.\n\n---\n\n### Key Concepts\n\n* ***Workflow***: A collection of automated steps defined in a YAML file.\n* ***Event***: Triggers the workflow (e.g., push, pull_request, schedule).\n* ***Job***: A collection of steps to be executed on a virtual machine.\n* ***Step***: An individual task in a job, like running a script or installing dependencies.\n\n---\n\n## Setting Up a GitHub Actions Workflow\n\n### Step 1: Create the Workflow File\n\n* Navigate to your repository on GitHub.\n* Go to the **Actions** tab.\n* Click **New Workflow** to explore templates or **Set up a workflow yourself** to start from scratch. You never really start from scratch. It is useful to look at examples in other people's repository and emulate their work. \n* This creates a folder `.github/workflows/` and a YAML file for your workflow (e.g., main.yml).\n---\n\n### Step 2: Define the Workflow\n\nHere’s an example of a basic workflow:\n\n```\nname: learn-github-actions\nrun-name: ${{ github.actor }} is learning GitHub Actions\non: [push]\njobs:\n  check-bats-version:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n      - run: npm install -g bats\n      - run: bats -v\n```\n---\n\n### Step 3: Commit the Workflow File\n\n* Save and commit the workflow file to the `.github/workflows/` directory.\n* The workflow will automatically run based on the specified triggers (e.g., a push to the main branch).\n\n---\n\n### Anatomy of a Workflow File\n\n* `name`: The name of your workflow (e.g., CI Workflow).\n* `on`: The event(s) that trigger the workflow (e.g., push, pull_request, or schedule).\n* `jobs`: The tasks to be performed.\n    * `build`: A job name.\n    * `runs-on`: Specifies the virtual environment (e.g., ubuntu-latest, windows-latest). You can set up multiple workflows to test your code on various platform to make sure it is compatible with various OS. \n    * `steps`: The individual steps to execute:\n    * `uses`: [Predefined GitHub Actions](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/using-pre-written-building-blocks-in-your-workflow) (e.g., actions/checkout@v3).\n    * `run`: Custom shell commands.\n\n---\n\n### Example use cases\n\n* [Run Python Tests](https://github.com/LinkedEarth/Pyleoclim_util/blob/master/.github/workflows/testmaster.yml).\n* [Create a Docker Container](https://github.com/LinkedEarth/Pyleoclim_util/blob/master/.github/workflows/build.yml).\n* [Upload package to Pypi following a GitHub release](https://github.com/LinkedEarth/Pyleoclim_util/blob/master/.github/workflows/publish.yml).\n* [Create a static website](https://github.com/LinkedEarth/LeapFROGS/blob/main/.github/workflows/gatsby-publish.yaml). Yes, we use GitHub actions to deploy the platform you are currently using!\n\n---\n\n## GitHub Secrets\n\nOn the previous examples, you should have seen several examples of `GitHub secrets`. So what are they? GitHub Secrets are encrypted variables that you can use in your workflows to securely store sensitive information like API keys, access tokens, or passwords. These secrets are not exposed in your repository or workflow logs, ensuring the security of your data.\n\n### How to Add Secrets\n1. Go to your repository on GitHub.\n2. Navigate to Settings > Secrets and variables > Actions.\n3. Click New repository secret.\n4. Add a name (e.g., API_KEY) and value (e.g., your actual API key).\n5. Click Add Secret.\n\n---\n### Using Secrets in Workflows\n\nYou can access secrets in your GitHub Actions workflows using the `${{ secrets.<SECRET_NAME> }}` syntax.\n\n**Best Practices:**\n* ***Keep Secrets Descriptive***: Use meaningful names for clarity (e.g., AWS_ACCESS_KEY, DB_PASSWORD).\n* ***Restrict Access***: Use environment-specific secrets to limit access.\n* ***Do Not Hardcode Secrets***: Always store sensitive data in GitHub Secrets, never in your code.\n* ***Regularly Rotate Secrets***: Update secrets periodically to enhance security.\n\nGitHub Secrets make it simple to securely integrate sensitive information into your workflows without risking exposure.\n\n---\n\n## Tips for Writing Workflows\n\n* ***Use Pre-Built Actions***: Explore the [GitHub Actions Marketplace](https://github.com/marketplace?type=actions) for reusable actions.\n* ***Secure Secrets***: Store sensitive data like API keys in Settings > Secrets and variables.\n* ***Debugging***: Use run: echo \"Debug message\" to output debugging information.\n* ***YAML Validation***: Ensure proper YAML indentation to avoid errors. You can use online validators such as [YAML Lint](https://www.yamllint.com), [YAML Checker](https://yamlchecker.com). \n\n---\n\n## Additional Resources\n\n* [GitHub Actions Documentation](https://docs.github.com/en/actions)\n* [Actions Marketplace](https://github.com/marketplace/actions)\n* [Learn GitHub Actions](https://docs.github.com/en/actions/learn-github-actions)\n---","fields":{"slug":"/chapter5_05_Advanced GitHub"}}},{"node":{"rawMarkdownBody":"\n<div><h1><img src=\"https://foundations.projectpythia.org/_images/GitHub-logo.png\" alt=\"GitHub Logo\" width=25% align=\"left\"/> Lesson 1<br>Git and GitHub</h1></div>\n\n---\n# Git\n\nGit is a distributed version control system that helps developers track and manage changes in their codebase. Here's a breakdown:\n\n* Version Control: Git keeps a history of changes made to files, allowing developers to revert to previous versions, collaborate with others, and handle multiple versions of a project.\n* Distributed System: Unlike centralized version control systems, Git allows every developer to have a full copy of the repository, making it robust and ideal for collaborative work.\n* Key Features:\n  * Branching and merging: Developers can work on separate branches and merge changes seamlessly.\n  * Speed and efficiency: Operations like commits, diffs, and merges are fast.\n  * Offline capability: Most tasks can be done without an internet connection.\n\n\n---\n\n# GitHub\n\nGitHub is a web-based platform built on top of Git, providing additional features for collaboration and project management. It allows developers to host and manage Git repositories in the cloud. \n\n* Integration with CI/CD Tools: Automate testing, building, and deployment pipelines.\n* GitHub Pages: Host static websites directly from a repository.\n* Code Hosting: GitHub stores your code in repositories and makes it accessible to collaborators or the public.\n* Collaboration Tools:\n  * Pull requests: Suggest and review code changes.\n  * Issue tracking: Manage bugs, feature requests, and tasks.\n  * Project boards: Organize and prioritize work visually.\n* Social and Community Features:\n  * Forking: Clone repositories to create your version.\n  * Stars: Bookmark repositories you find useful.\n  * Discussions: Communicate and share knowledge within the community.\n\n[Pythia - What is GitHub?](https://foundations.projectpythia.org/foundations/github/what-is-github.html)      \n\n---\n\n## Git vs. GitHub\n\n* Git: A tool for version control and code management.\n* GitHub: A web-based platform that uses Git while adding collaboration, hosting, and project management features.\n* GitHub Desktop: a free, user-friendly application that provides a graphical interface for working with Git and GitHub.\n\nThey are often used together, but GitHub is just one of several services (like GitLab and Bitbucket) that can host Git repositories.\n\n","fields":{"slug":"/chapter5_01_git_and_github"}}}]}}}