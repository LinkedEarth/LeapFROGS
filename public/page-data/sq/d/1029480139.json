{"data":{"site":{"siteMetadata":{"testTemplate":"from wasabi import msg\nfrom black import format_str, FileMode\n\nfile_mode = FileMode()\n\ndef blacken(code):\n    try:\n        return format_str(code, mode=file_mode)\n    except:\n        return code\n\n__msg__ = msg\n__solution__ = blacken(\"\"\"${solution}\"\"\")\n\n${solution}\n\n${test}\n\ntry:\n    test()\nexcept AssertionError as e:\n    __msg__.fail(e)","juniper":{"repo":"LinkedEarth/LeapFROGS","branch":"main","kernelType":"python3","lang":"python","debug":false}}},"allCode":{"edges":[{"node":{"name":"solution_01_01","code":"print(\"I love doing geoscience research with Python\")\n"}},{"node":{"name":"exc_01_01","code":"------------\n"}},{"node":{"name":"solution_01_02","code":"temperature = 25*9/5+32\n"}},{"node":{"name":"exc_01_02","code":"temperature = ------------\n"}},{"node":{"name":"test_01_02","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert temperature == 77, \"temperature is incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"solution_01_03","code":"area = 3.14159*5**2\n"}},{"node":{"name":"test_01_03","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert area == 3.14159*5**2, \"Area is incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"exc_01_03","code":"area = ------------\n"}},{"node":{"name":"solution_01_04","code":"temperature = 25\nunits = 'degC'\n"}},{"node":{"name":"test_01_04","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert temperature == 25, \"Temperature is incorrect\"\n    assert units == 'DegC', \"Units is incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"exc_01_04","code":"--------------\n--------------\n"}},{"node":{"name":"solution_01_05","code":"text = 'The law of superposition, a major principle of stratigraphy, states that within a sequence of layers of sedimentary rock, the oldest layer is at the base and that the layers are progressively younger with ascending order in the sequence.'[11:24]\n\nword = text[10:22]"}},{"node":{"name":"test_01_05","code":"def test():\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as __solution__. A helper for\n    # printing formatted messages is available as __msg__. See the testTemplate\n    # in the meta.json for details.\n\n    # If an assertion fails, the message will be displayed\n    assert word == 'superposition', \"Slice indices are incorrect\"\n\n    __msg__.good(\"Well done!\")\n"}},{"node":{"name":"exc_01_05","code":"text = 'The law of superposition, a major principle of stratigraphy, states that within a sequence of layers of sedimentary rock, the oldest layer is at the base and that the layers are progressively younger with ascending order in the sequence.'[-----]\n\nword = ------"}}]}}}